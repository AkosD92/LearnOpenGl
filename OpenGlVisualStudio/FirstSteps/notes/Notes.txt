Note for swap buffers:
	When an application draws in a single buffer the resulting image might display flickering issues.
	This is because the resulting output image is not drawn in an instant,
	but drawn pixel by pixel and usually from left to right and top to bottom.
	Because this image is not displayed at an instant to the user while still being rendered to, the result may contain artifacts.
	To circumvent these issues, windowing applications apply a double buffer for rendering.
	The front buffer contains the final output image that is shown at the screen,
	while all the rendering commands draw to the back buffer.
	As soon as all the rendering commands are finished we swap the back buffer to the front buffer so the image is instantly displayed to the user,
	removing all the aforementioned artifacts. */


Do NOT unbind the EBO while a VAO is active as the bound element buffer object IS stored in the VAO; keep the EBO bound.
You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.


Regarding the FPS counter:
There is an odd thing in this code. It displays the time, in milliseconds, 
needed to draw a frame (averaged on 1 second) instead of how many frame were drawn in the last second.
This is actually much better. Don’t rely on FPS. Never. FramesPerSecond = 1/SecondsPerFrame, 
so this is an inverse relationship, and we humans suck at understanding this kind of relationship. Let’s take an example.
You write a great rendering function that runs at 1000 FPS ( 1ms/frame ). 
But you forgot a little computation in a shader, which adds an extra cost of 0.1ms. And bam, 1/0.0011 = 900. 
You just lost 100FPS. Morality : never use FPS for performance analysis.
If you intend to make a 60fps game, your target will be 16.6666ms ; 
If you intend to make a 30fps game, your target will be 33.3333ms. That’s all you need to know.